// 学习使用编译器和工厂方法构建动态组件
import {AfterViewInit, Compiler, Component, Injector, NgModule, NgModuleRef, ViewChild, ViewContainerRef} from '@angular/core';

@Component({
  selector: 'app-container',
  templateUrl: './container.component.html',
  styleUrls: ['./container.component.css']
})
export class ContainerComponent implements AfterViewInit {

  @ViewChild('vc', {read: ViewContainerRef, static: true}) vc: ViewContainerRef;

  constructor(private _compiler: Compiler,
              private _injector: Injector,
              private _m: NgModuleRef<any>) {
  }

  ngAfterViewInit(): void {
    const template = `<span>generated by dynamic: {{name}}</span>`;
    const tmpCmp = Component({template: template})(class DynamicByFactory {
    });
    const tmpModule = NgModule({declarations: [tmpCmp]})(class DynamicByFactoryModule {
    });
    this._compiler.compileModuleAndAllComponentsAsync(tmpModule).then(factories => {
      const f = factories.componentFactories[0];
      const cmpRef = this.vc.createComponent(f);
      cmpRef.instance.name = 'DynamicByFactory';
    });
  }


}
